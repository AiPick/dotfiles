let g:smooziee_scroll_interval  = '20'
let g:plugin_loader_roots       = '~/.vimperator/vimperator-plugins'
let g:plugin_loader_plugins     = 'open-with,goo.gl,_smooziee,'
let g:plugin_loader_plugins    .= 'caret-hint,imageextender,feedSomeKeys_3,'
let g:plugin_loader_plugins    .= 'proxy_command,firebug,stylish'
let g:powerline_seps            = 'bookmark,tabcount,position,proxy'
let g:powerline_back_colors     = '#2980b9,#e67e22,#1abc9c,#000000'
let g:powerline_fore_colors     = '#000000,#000000,#000000,default'

source ~/.vimperator/vimperator-plugins/_libly.js
source ~/.vimperator/vimperator-plugins/plugin_loader.js
source ~/.vimperator/vimperator-plugins/stylish.js

nnoremap Y :googleUrlShortener<CR>
nnoremap v :caret select head<CR>
nnoremap H :back<CR>
nnoremap L :forward<CR>
nnoremap D :tabclose!<CR>
nnoremap <silent> f :silent !fcitx-remote -c<CR>f
nnoremap <silent> F :silent !fcitx-remote -c<CR>F
nnoremap <silent> : :silent !fcitx-remote -c<CR>:
nnoremap <silent> b :silent !fcitx-remote -c<CR>b
nnoremap <silent> t :silent !fcitx-remote -c<CR>t
nnoremap <silent> o :silent !fcitx-remote -c<CR>o
nnoremap <C-L> :set gui=navigation<CR><C-L>
nnoremap <Esc> <Esc>:set gui=nonavigation<CR>
nnoremap <C-Q> <C-W>
nnoremap <C-Y> :js markdown_url()<CR>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>
cnoremap <C-Q> <Esc>

set hintchars=abcdefghijklmnopqrstuvwxyz
set suggestengines=''
set gui=nonavigation
set focuscontent
set wildmode=list:full
" set noscrollbars
set animations
colorscheme indigo

javascript <<EOM
function markdown_url() {
  var mdurl = '[' + buffer.title + '](' + buffer.URL + ')';
  util.copyToClipboard(mdurl);
  liberator.echo('copied:' + mdurl);
}

function toggle_flash() {
  var oldvar = options.getPref('plugin.state.flash');
  if (oldvar > 0)
    liberator.echo('flash-plugin disabled.');
  else
    liberator.echo('flash-plugin enabled.');
  options.setPref('plugin.state.flash', 2-oldvar);
}

function execute_if_no_flash(command) {
  if (options.getPref('plugin.state.flash') == 0)
    liberator.execute(command);
}

function toggle_proxy() {
  var pxtype = options.getPref('network.proxy.type');
  if (pxtype != 2)
    liberator.execute('proxy pac -reload file:///home/farseer/.proxy.pac');
  else
    liberator.execute('proxy direct');
}

function proxy_status() {
  if (!document.getElementById('liberator-status-proxy')) {
    var proxy_st = document.createElement('label');
    proxy_st.setAttribute('id', 'liberator-status-proxy');
    statusline._statuslineWidget.appendChild(proxy_st);
  }

  var pxObserver = {
    observe: function(subject, topic, data) {
      statusline.updateField('proxy');
    }
  }

  Services.prefs.addObserver('network.proxy.type', pxObserver, false);
  statusline.addField('proxy', 'proxy state', 'liberator-status-proxy',
    function updateProxy (node) {
      var pxtype = options.getPref('network.proxy.type');
      switch (pxtype) {
        case 0:
          node.value = '✘';
          node.style.color = '#d35400';
          break;
        case 1:
          node.value = 'M';
          node.style.color = '#95a5a6';
          break;
        case 2:
          node.value = '✔';
          node.style.color = '#2ecc71';
          break;
        case 4:
          node.value = 'A';
          break;
        case 5:
          node.value = 'S';
          break;
        default:
          node.value = 'U';
      }
    });
  statusline.updateField('proxy');
}

function power_arrow(id, right, full) {
  var pa = document.createElement('label');
  pa.setAttribute('id', 'liberator-status-pa-'+id);
  pa.style.fontSize = '14px';
//  pa.style.marginRight = '-2px';
//  pa.style.marginTop = '-1px';
  if (right)
    pa.textContent = (full ? '' : '');
  else
    pa.textContent = (full ? '' : '');
  return pa;
}

function power_status() {
  var seperators = liberator.globalVariables.powerline_seps.split(',');
  var bcolors = liberator.globalVariables.powerline_back_colors.split(',');
  var fcolors = liberator.globalVariables.powerline_fore_colors.split(',');
  var widgets = options.get('status').value.split(',');
  var fields = statusline._statusfields;
  var cur = -1;
  for (var i = 0; i < widgets.length; i++) {
    if (widgets[i] == seperators[cur+1]) {
      cur++;
      old_pa = document.getElementById('liberator-status-pa-'+widgets[i]);
      if (old_pa)
        statusline._statuslineWidget.removeChild(old_pa);
      var pa = power_arrow(widgets[i], 1, 0);
      pa.style.color = bcolors[cur];
      if (cur > 0)
        pa.style.background = bcolors[cur-1];
      statusline._statuslineWidget.insertBefore(pa, fields[widgets[i]].node);
    }
    if (cur > -1) {
      fields[widgets[i]].node.style.background = bcolors[cur];
      if (fcolors[cur] != 'default')
        fields[widgets[i]].node.style.color = fcolors[cur];
    }
  }
}

function move_tab(count, direction) {
  var tabb = config.tabbrowser
  var curr = tabb.mCurrentTab
  function current_index() {
    for (var i = 0; i < tabb.tabs.length; i++) {
      if (curr == tabb.tabs[i])
        return i;
    }
  }
  var curi = current_index()
  if (!count) count = 1
  if (direction)
    tabb.moveTabTo(curr, curi - count)
  else
    tabb.moveTabTo(curr, curi + count)
}

mappings.addUserMap([modes.NORMAL], ['[t'], 'move tab left',
  function(count) move_tab(count, 1), {count: true})
mappings.addUserMap([modes.NORMAL], [']t'], 'move tab right',
  function(count) move_tab(count, 0), {count: true})

function getMPDSongInfo() {
    var host = liberator.globalVariables.mpd_currentsong_host || 'localhost';
    var port = liberator.globalVariables.mpd_currentsong_port || 6600;
    var socketService = Components.classes["@mozilla.org/network/socket-transport-service;1"]
    .getService(Components.interfaces.nsISocketTransportService);
    var transport = socketService.createTransport(null, 0, host, port, null);
    var os = transport.openOutputStream(0, 0, 0);
    var is = transport.openInputStream(0, 0, 0);
    var cis = Cc["@mozilla.org/intl/converter-input-stream;1"].createInstance(Ci.nsIConverterInputStream);
    cis.init(is, 'UTF-8', 1024, 0xFFFD);
    cis.QueryInterface(Ci.nsIUnicharLineInputStream);

    var buf = "currentsong\nping\n";
    os.write(buf, buf.length);

    var timeout = true;
    var song = {};

    buf = {};
    outer: for (var i = 0; i < 100; i++) {
      while (cis.readLine(buf) > 0) {
        var line = buf.value;
        var m = line.match(/^(\w+):\s*(.*)$/);
        if (m)
          song[m[1]] = m[2];
        if (!/^OK MPD/.test(line) && /^OK/.test(line)) {
          timeout = false;
          break outer;
        }
      }
      liberator.sleep(100);
    }
    os.close();
    is.close();

    if (timeout)
      throw 'Timeout';

    return song;
}

function search_current_MPD(source, info) {
  var bases = {
    'songfacts-song': 'http://www.songfacts.com/search-songs-1.php?',
    'songfacts-artist': 'http://www.songfacts.com/search-artists-1.php?',
    'netease-song': 'http://music.163.com/#/search/m/?s=',
    'netease-artist': 'http://music.163.com/#/search/m/?type=100&s=',
    'netease-lyric': 'http://music.163.com/#/search/m/?type=1006&s=',
  }
  var url_key = source + '-' + info
  if (!(url_key in bases))
    url_key = 'netease-song'
  var song = getMPDSongInfo()
  var content = song.Title + '-' + song.Artist
  if (info == 'artist')
    content = getMPDSongInfo().Artist
  if (info == 'song' && source == 'songfacts')
    content = getMPDSongInfo().Title
  liberator.open(bases[url_key]+encodeURI(content), liberator.NEW_TAB)
}
EOM

js proxy_status()
set status=location,ssl,bookmark,history,input,tabcount,position,proxy
js power_status()

autocmd!
autocmd PageLoad v\\.youku\\.com js execute_if_no_flash('youplayer')
autocmd PageLoad www\\.bilibili\\.com/video/av js execute_if_no_flash('bilidan')

command! pin :set apptab
command! unpin :set noapptab
command! youplayer :openwith youplayer
command! bilidan :openwith bilidan
command! chrome :openwith chromium
command! flashtoggle :js toggle_flash()
command! ss :js toggle_proxy()
command! sg :proxy manual -socks 127.0.0.1:6024
command! mpdNetease :js search_current_MPD('netease', 'song')
command! mpdSongfacts :js search_current_MPD('songfacts', 'song')
nnoremap <C-F> :flashtoggle<CR>

" fmaps -urls='feedly.com' j k <s-j> <s-k> n p o v r <s-m> gg ga
" fmaps -urls='twitter.com' gh gn ga gr gd gp gf gl gm gs gu
" ignorekeys add github\\.com -except=:,f,F,b,t,j,k,r,H,L,/,<Esc>
" ignorekeys add inbox\\.google\\.com -except=:,f,F,b,t,r,/,<Esc>
" vim:ts=2:sw=2:tw=0:ft=vim:fdm=marker:foldmarker={,}
